document.addEventListener('DOMContentLoaded', () => {
    // Elements
    const elements = {
        startButton: document.getElementById('start'),
        stopButton: document.getElementById('stop'),
        output: document.getElementById('output'),
        listeningIndicator: document.getElementById('listeningIndicator'),
        healthTipsButton: document.getElementById('healthTips'),
        bookAppointmentButton: document.getElementById('bookAppointment'),
        symptomCheckerButton: document.getElementById('symptomChecker'),
        contactSupportButton: document.getElementById('contactSupport'),
        aboutUsButton: document.getElementById('aboutUs'),
        languageButtons: {
            'en-US': document.getElementById('englishButton'),
            'hi-IN': document.getElementById('hindiButton'),
            'te-IN': document.getElementById('teluguButton')
        }
    };

    // Variables
    let recognition;
    let isListening = false;
    let expectingFollowUp = false;
    let currentLanguage = 'en-US'; // Default language

    // Initialize Speech Recognition
    function initSpeechRecognition() {
        if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            recognition.continuous = false; // Set to true for continuous listening
            recognition.interimResults = false; // Set to true for interim results
            recognition.lang = currentLanguage;

            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript.trim();
                elements.output.textContent = transcript;
                if (expectingFollowUp) {
                    handleFollowUpResponse(transcript.toLowerCase());
                } else {
                    respond(transcript.toLowerCase());
                }
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                elements.output.textContent = `Error: ${event.error}`;
                elements.listeningIndicator.textContent = 'üî¥ Error';
            };

            recognition.onend = () => {
                if (isListening) {
                    recognition.start();
                }
                updateListeningStatus(false);
            };
        } else {
            elements.output.textContent = 'Speech recognition not supported in this browser.';
        }
    }

    // Update Listening Status
    function updateListeningStatus(listening) {
        isListening = listening;
        elements.listeningIndicator.textContent = listening ? 'üü¢ Listening' : 'üî¥ Not Listening';
        if (!listening) elements.output.textContent = 'Stopped listening.';
    }

    // Event Listeners for Language Selection
    Object.keys(elements.languageButtons).forEach((lang) => {
        elements.languageButtons[lang].addEventListener('click', () => {
            currentLanguage = lang;
            updateLanguageSettings();
        });
    });

    function updateLanguageSettings() {
        if (recognition) {
            recognition.lang = currentLanguage;
        }
        greetUser();
    }

    // Initialize Speech Recognition
    initSpeechRecognition();

    // Event Listeners for Start/Stop buttons
    elements.startButton.addEventListener('click', () => {
        if (!isListening) {
            recognition.start();
            updateListeningStatus(true);
            greetUser();
        }
    });

    elements.stopButton.addEventListener('click', () => {
        if (isListening) {
            recognition.stop();
            updateListeningStatus(false);
        }
    });

    // Example Health Tips Button
    elements.healthTipsButton.addEventListener('click', () => {
        const tips = {
            'en-US': "Remember to stay hydrated, get regular exercise, and eat a balanced diet.",
            'hi-IN': "‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç, ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§Ç‡•§",
            'te-IN': "‡∞™‡±Å‡∞∑‡±ç‡∞ï‡∞≤‡∞Ç‡∞ó‡∞æ ‡∞®‡±Ä‡∞∞‡±Å ‡∞§‡∞æ‡∞ó‡∞Ç‡∞°‡∞ø, ‡∞ï‡±ç‡∞∞‡∞Æ‡∞Ç ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø ‡∞µ‡±ç‡∞Ø‡∞æ‡∞Ø‡∞æ‡∞Æ‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞Æ‡∞§‡±Å‡∞≤‡±ç‡∞Ø ‡∞Ü‡∞π‡∞æ‡∞∞‡∞Ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø."
        };
        speak(tips[currentLanguage]);
    });

    // Event Listeners for other actions
    elements.bookAppointmentButton.addEventListener('click', () => {
        speak({
            'en-US': "Booking an appointment with your preferred doctor. Please hold on...",
            'hi-IN': "‡§Ü‡§™‡§ï‡•á ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...",
            'te-IN': "‡∞Æ‡±Ä‡∞ï‡±Å ‡∞á‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç‚Äå‡∞§‡±ã ‡∞Ö‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±á‡∞ö‡∞ø ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø..."
        }[currentLanguage]);
    });

    elements.contactSupportButton.addEventListener('click', () => {
        speak({
            'en-US': "Connecting you to customer support. Please wait...",
            'hi-IN': "‡§Ü‡§™‡§ï‡•ã ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...",
            'te-IN': "‡∞Æ‡±Ä‡∞ï‡±Å ‡∞ï‡∞∏‡±ç‡∞ü‡∞Æ‡∞∞‡±ç ‡∞∏‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞µ‡±á‡∞ö‡∞ø ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø..."
        }[currentLanguage]);
    });

    elements.aboutUsButton.addEventListener('click', () => {
        speak({
            'en-US': "We are committed to providing you with the best healthcare assistance. How can we help you today?",
            'hi-IN': "‡§π‡§Æ ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§∞‡•ç‡§µ‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§† ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§¶‡•ç‡§ß ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§ú ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
            'te-IN': "‡∞Æ‡±á‡∞Æ‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡∞ü‡±ç‡∞ü‡±Å‡∞¨‡∞°‡∞ø ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å. ‡∞à ‡∞∞‡±ã‡∞ú‡±Å ‡∞Æ‡∞ø‡∞Æ‡±ç‡∞Æ‡∞≤‡±ç‡∞®‡∞ø ‡∞é‡∞≤‡∞æ ‡∞∏‡∞æ‡∞Ø‡∞™‡∞°‡∞ó‡∞≤‡∞®‡±Å?"
        }[currentLanguage]);
    });

    // Responding to Symptoms
    elements.symptomCheckerButton.addEventListener('click', () => {
        speak("Please describe your symptoms, and I can provide some advice.");
        expectingFollowUp = true;
    });

    function respond(message) {
        const responses = {
            'fever': {
                'en-US': "It seems you have a fever. Rest, stay hydrated, and take paracetamol if necessary. If the fever persists, consult a doctor.",
                'hi-IN': "‡§ê‡§∏‡§æ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•à‡•§ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç, ‡§î‡§∞ ‡§™‡•á‡§∞‡§æ‡§∏‡§ø‡§ü‡§æ‡§Æ‡•ã‡§≤ ‡§≤‡•á‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§¨‡§®‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
                'te-IN': "‡∞Æ‡±Ä‡∞ï‡±Å ‡∞ú‡±ç‡∞µ‡∞∞‡∞Ç ‡∞â‡∞®‡±ç‡∞®‡∞ü‡±ç‡∞≤‡±Å‡∞ó‡∞æ ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø. ‡∞µ‡∞ø‡∞∂‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞ø ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞§‡∞ó‡∞ø‡∞®‡∞Ç‡∞§ ‡∞®‡±Ä‡∞ü‡∞ø‡∞®‡∞ø ‡∞§‡±ç‡∞∞‡∞æ‡∞ó‡∞Ç‡∞°‡∞ø, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Æ‡±à‡∞§‡±á ‡∞™‡∞æ‡∞∞‡∞æ ‡∞∏‡∞ø‡∞ü‡∞Æ‡∞æ‡∞≤‡±ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø. ‡∞ú‡±ç‡∞µ‡∞∞‡∞Ç ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞§‡±á, ‡∞°‡∞æ‡∞ï‡±ç‡∞ü‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
            },
            'headache': {
                'en-US': "For a headache, rest in a dark room, stay hydrated, and take ibuprofen. If the pain persists, seek medical advice.",
                'hi-IN': "‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§è‡§ï ‡§Ö‡§Ç‡§ß‡•á‡§∞‡•á ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç, ‡§î‡§∞ ‡§á‡§¨‡•Å‡§™‡•ç‡§∞‡•ã‡§´‡•á‡§® ‡§≤‡•á‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§¶‡§∞‡•ç‡§¶ ‡§¨‡§®‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
                'te-IN': "‡∞§‡∞≤‡∞®‡±ä‡∞™‡±ç‡∞™‡∞ø ‡∞ï‡±ã‡∞∏‡∞Ç, ‡∞ö‡±Ä‡∞ï‡∞ü‡∞ø ‡∞ó‡∞¶‡∞ø‡∞≤‡±ã ‡∞µ‡∞ø‡∞∂‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞ø ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞§‡∞ó‡∞ø‡∞®‡∞Ç‡∞§ ‡∞®‡±Ä‡∞ü‡∞ø‡∞®‡∞ø ‡∞§‡±ç‡∞∞‡∞æ‡∞ó‡∞Ç‡∞°‡∞ø, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞á‡∞¨‡±Å‡∞™‡±ç‡∞∞‡±ã‡∞´‡±Ü‡∞®‡±ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø. ‡∞®‡±ä‡∞™‡±ç‡∞™‡∞ø ‡∞ï‡±ä‡∞®‡∞∏‡∞æ‡∞ó‡∞ø‡∞§‡±á, ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡∞≤‡∞π‡∞æ ‡∞™‡±ä‡∞Ç‡∞¶‡∞Ç‡∞°‡∞ø."
            }
        };

        const match = Object.keys(responses).find(key => message.includes(key));
        if (match) {
            speak(responses[match][currentLanguage]);
        } else {
            speak({
                'en-US': "I didn't quite catch that. Could you please repeat?",
                'hi-IN': "‡§Æ‡•à‡§Ç‡§®‡•á ‡§µ‡§π ‡§∏‡§π‡•Ä ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡§æ‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§π‡§∞‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
                'te-IN': "‡∞®‡±á‡∞®‡±Å ‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞∞‡±à‡∞® ‡∞µ‡∞ø‡∞ß‡∞Ç‡∞ó‡∞æ ‡∞™‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡±ã‡∞≤‡±á‡∞¶‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞ö‡±Ü‡∞™‡±ç‡∞§‡∞æ‡∞∞‡∞æ?"
            }[currentLanguage]);
        }
    }

    // Handling Follow-Up Responses
    function handleFollowUpResponse(message) {
        // Example responses
        const followUpResponses = {
            'yes': {
                'en-US': "Great! How else can I assist you?",
                'hi-IN': "‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
                'te-IN': "‡∞ö‡∞æ‡∞≤‡∞æ ‡∞Æ‡∞Ç‡∞ö‡∞ø! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡∞ø‡∞Æ‡±ç‡∞Æ‡∞≤‡±ç‡∞®‡∞ø ‡∞á‡∞Ç‡∞ï‡±á‡∞Ç ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡∞æ?"
            },
            'no': {
                'en-US': "Okay, let me know if you need anything else.",
                'hi-IN': "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§î‡§∞ ‡§ö‡•Ä‡§ú‡§º ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§§‡•ã ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
                'te-IN': "‡∞∏‡∞∞‡±á, ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Æ‡∞∞‡±á‡∞¶‡±à‡∞®‡∞æ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç ‡∞â‡∞Ç‡∞ü‡±á ‡∞®‡∞æ‡∞ï‡±Å ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞ú‡±á‡∞Ø‡∞Ç‡∞°‡∞ø."
            }
        };

        const response = followUpResponses[message];
        if (response) {
            speak(response[currentLanguage]);
        } else {
            speak({
                'en-US': "I'm not sure how to respond to that. Can you please clarify?",
                'hi-IN': "‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏ ‡§™‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ø‡§ï‡•Ä‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
                'te-IN': "‡∞®‡±á‡∞®‡±Å ‡∞¶‡±Ä‡∞®‡∞ø‡∞ï‡∞ø ‡∞é‡∞≤‡∞æ ‡∞∏‡±ç‡∞™‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞ö‡∞æ‡∞≤‡±ã ‡∞®‡∞æ‡∞ï‡±Å ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞¶‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∏‡±ç‡∞™‡∞∑‡±ç‡∞ü‡∞§ ‡∞á‡∞µ‡±ç‡∞µ‡∞ó‡∞≤‡∞∞‡±Å?"
            }[currentLanguage]);
        }

        expectingFollowUp = false;
    }

    // Function to speak text
    function speak(text) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = currentLanguage;
        window.speechSynthesis.speak(utterance);
    }

    // Greet User
    function greetUser() {
        const greetings = {
            'en-US': "Hello! How can I assist you today?",
            'hi-IN': "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§ú ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
            'te-IN': "‡∞π‡∞≤‡±ã! ‡∞®‡±á‡∞®‡±Å ‡∞à ‡∞∞‡±ã‡∞ú‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?"
        };
        speak(greetings[currentLanguage]);
    }
});

